# eberban PEG grammar - v0.15
# ===========================

# GRAMMAR
# main rule, allow language version/dialect annotation
text <- parser_version? text_1
parser_version <- DI_clause (!parser_version_number borrowing_content (pause_char !pause_char !y)? parser_version_number? / parser_version_number)
parser_version_number <- spaces? TA+
# main text rule
text_1 <- (free_indicator / free_discursive / free_parenthetical)* (paragraph+ / sentence*) spaces? EOF?

# sentences
paragraph <- DA_clause+ sentence*
sentence <- proposition

proposition <- proposition_1 (jak proposition_1)*
proposition_1 <- proposition_jak_pre / DE_clause_elidible KA_clause* predicate_chaining DEI_clause_elidible
proposition_jak_pre <- najak proposition (nik proposition)+ NAI_clause_elidible

predicate_chaining <- predicate_filling (predicate_chaining_tag predicate_chaining)? / predicate_unit (predicate_chaining_tag? predicate_chaining)?
predicate_chaining_tag <- CA_clause / predicate_chaining_import
predicate_chaining_import <- DOI_clause predicate_unit

predicate_filling <- predicate_unit predicate_filled_place+
predicate_filled_place <- predicate_place_tag+ predicate_term predicate_link*
predicate_link <- VA_clause predicate_unit+

predicate_place_tag <- FA_clause / predicate_place_import
predicate_place_import <- DO_clause predicate_unit

predicate_term <- predicate_term_jak_post / predicate_term_1
predicate_term_jak_post <- predicate_term_1 (jak predicate_term_1)+
predicate_term_1 <- predicate_term_jaik_post / predicate_term_2
predicate_term_jaik_post <- predicate_term_2 (jaik predicate_term_2)+
predicate_term_2 <- predicate_unit

predicate_unit <- SA_clause* predicate_unit_1
predicate_unit_1 <- compound free_post* / borrowing / grammatical_quote / one_word_quote / foreign_quote / abstraction / MA_clause / free_prefix* spaces? (root / string) free_post*

# compound prefixes
compound <- (compound_1 / compound_2 / compound_3 / compound_4  / compound_n) &post_word
compound_1 <- A_clause compound_word
compound_2 <- E_clause compound_word compound_word
compound_3 <- I_clause compound_word compound_word compound_word
compound_4 <- O_clause compound_word compound_word compound_word compound_word
compound_n <- U_clause (!(pause_char? U) compound_word)+ (pause_char? U)
compound_word <- initial_pause native_word

# borrowings
borrowing <- ZA_clause borrowing_content (pause_char / space_char / EOF) free_post*
borrowing_content <- (spaces? !coda / spaces &coda) foreign_word

# quotes
grammatical_quote <- ZE_clause text_1 ZEI_clause
one_word_quote <- ZI_clause spaces? native_word
foreign_quote <- ZU_clause (spaces?) foreign_quote_open spaces foreign_quote_content foreign_quote_close free_post*
foreign_quote_content <- (foreign_quote_word spaces)*

# abstractions
abstraction <- BA_clause proposition BAI_clause_elidible

# string (numbers / literals)
string <- (number_string / letter_string) TAI_clause_elidible
number_string <- TA_clause (TA_clause / BY_clause)*
letter_string <- BY_clause (TA_clause / BY_clause)*

# afterthough connectives
jak <- KA_clause? SA_clause? JA_clause KAI_clause? free_post*
jaik <- JAI_clause
cak <- KA_clause? SA_clause? CA_clause KAI_clause?  free_post*

# forethough connectives
najak <- NA_clause SA_clause? JA_clause KAI_clause? free_post*
nacak <- NA_clause SA_clause? CA_clause KAI_clause? free_post*
nik <- NI_clause KAI_clause? free_post*

# free prefix
free_prefix <- LA_clause

# free suffix
free_post <- LAI_clause / free_indicator / free_discursive / free_parenthetical / free_subscript
free_indicator <- LI_clause
free_discursive <- LE_clause predicate_unit+
free_parenthetical <- LO_clause text_1 LOI_clause
free_subscript <- LU_clause string

# PARTICLES CLAUSES
A_clause            <- free_prefix* spaces? A
BA_clause           <- free_prefix* spaces? BA 
BAI_clause          <- free_prefix* spaces? BAI free_post*
BAI_clause_elidible <- BAI_clause?
BY_clause           <- free_prefix* spaces? BY
CA_clause           <- free_prefix* spaces? CA free_post*
DA_clause           <- free_prefix* spaces? DA free_post*
DE_clause           <- free_prefix* spaces? DE free_post*
DE_clause_elidible  <- DE_clause?
DEI_clause          <- free_prefix* spaces? DEI free_post*
DEI_clause_elidible <- DEI_clause?
DI_clause           <- spaces? DI
DO_clause           <- free_prefix* spaces? DO
DOI_clause          <- free_prefix* spaces? DOI
E_clause            <- free_prefix* spaces? E
FA_clause           <- free_prefix* spaces? FA free_post*
I_clause            <- free_prefix* spaces? I
JA_clause           <- free_prefix* spaces? JA free_post*
JAI_clause          <- free_prefix* spaces? JAI free_post*
KA_clause           <- free_prefix* spaces? KA free_post*
KAI_clause          <- free_prefix* spaces? KAI
LA_clause           <- spaces? LA
LAI_clause          <- spaces? LAI
LE_clause           <- free_prefix* spaces? LE
LI_clause           <- free_prefix* spaces? LI
LO_clause           <- free_prefix* spaces? LO
LOI_clause          <- free_prefix* spaces? LOI
LU_clause           <- free_prefix* spaces? LU
MA_clause           <- free_prefix* spaces? MA free_post*
NA_clause           <- free_prefix* spaces? NA
NAI_clause          <- free_prefix* spaces? NAI free_post*
NAI_clause_elidible <- NAI_clause?
NI_clause           <- free_prefix* spaces? NI
NO_clause           <- free_prefix* spaces? NO
NOI_clause          <- free_prefix* spaces? NOI free_post*
NOI_clause_elidible <- NOI_clause?
O_clause            <- free_prefix* spaces? O
SA_clause           <- free_prefix* spaces? SA
TA_clause           <- free_prefix* spaces? TA
TAI_clause          <- free_prefix* spaces? TAI
TAI_clause_elidible <- TAI_clause?
U_clause            <- free_prefix* spaces? U
VA_clause           <- free_prefix* spaces? VA
VAI_clause          <- free_prefix* spaces? VAI
VAI_clause_elidible <- VAI_clause?
ZA_clause           <- free_prefix* spaces? ZA
ZE_clause           <- free_prefix* spaces? ZE
ZEI_clause          <- free_prefix* spaces? ZEI free_post*
ZI_clause           <- free_prefix* spaces? ZI
ZU_clause           <- free_prefix* spaces? ZU

# PARTICLE FAMILIES
A     <- &particle (a)
BA    <- &particle !(BAI post_word) (b vowel_tail)
BAI   <- &particle (b a i)
BY    <- &particle (consonant y / vowel_y h y / (i / u) (y / n y) / y h a / y h e)
CA    <- &particle (c vowel_tail)
DA    <- &particle (d a)
DE    <- &particle (d e)
DEI   <- &particle (d e i)
DI    <- &particle (d i)
DO    <- &particle (d o)
DOI   <- &particle (d o i)
E     <- &particle (e)
FA    <- &particle (f vowel_tail)
I     <- &particle (i)
JA    <- &particle (j vowel)
JAI   <- &particle !(JA post_word) (j vowel_tail)
KA    <- &particle (k a)
KAI   <- &particle (k a i)
LA    <- &particle (l a vowel_tail_1?)
LAI   <- &particle (l a i)
LE    <- &particle (l &e vowel_tail)
LI    <- &particle (l &i vowel_tail)
LO    <- &particle (l o)
LOI   <- &particle (l o i)
LU    <- &particle (l u)
MA    <- &particle (m vowel_tail)
NA    <- &particle (n a)
NAI   <- &particle (n a i)
NI    <- &particle (n i)
NO    <- &particle (n o)
NOI   <- &particle (n o i)
O     <- &particle (o)
SA    <- &particle (s vowel_tail)
TA    <- &particle !(TAI post_word) (t vowel_tail) / digit
TAI   <- &particle (t a i)
U     <- &particle (u)
VA    <- &particle !(VAI post_word) (v vowel_tail)
VAI   <- &particle (v a i)
ZA    <- &particle (z &a vowel_tail)
ZE    <- &particle (z e)
ZEI   <- &particle (z e i)
ZI    <- &particle (z &i vowel_tail)
ZU    <- &particle (z &u vowel_tail)

# MORPHOLOGY
# - Forein text quoting
foreign_quote_open <- native_word
foreign_quote_word <- (!spaces .)+ 
foreign_quote_close <- native_word

# - Legal words
foreign_word <- (initial_consonant_pair / consonant)? vowel_tail_y (consonant_cluster vowel_tail_y)* consonant? consonant?
native_word <-  root / particle
particle <- consonant? vowel_tail_y &post_word
root <- ((initial_consonant_pair vowel_tail_y coda?) / ((initial_consonant_pair / consonant)? vowel_tail_y coda)) &post_word

# - Legal vowels and vowel tails
vowel_tail <- (diphthong / vowel) vowel_tail_1* 
vowel_tail_1 <- separator (vi_diphthong / vowel )

vowel_tail_y <- (diphthong_y / vowel_y) vowel_tail_y_1* 
vowel_tail_y_1 <- separator (vi_diphthong_y / vowel_y )

separator <- h / l / n / r

diphthong_y <- iuv_diphthong_y / vi_diphthong_y
iuv_diphthong_y <- (i / u) vowel_y
vi_diphthong_y <- (a / e / o / y) i 
vowel_y <- vowel / y 

diphthong <- iuv_diphthong / vi_diphthong
iuv_diphthong <- (i / u) vowel
vi_diphthong <- (a / e / o) i 
vowel <- a / e / i / o / u 

h <- [hH] # <LEAF>
a <- [aA] # <LEAF>
e <- [eE] # <LEAF>
i <- [iI] # <LEAF>
o <- [oO] # <LEAF>
u <- [uU] # <LEAF>
y <- [yY] # <LEAF>

# - Legal consonant and consonant pairs
consonant_cluster <- (!(coda coda coda) consonant consonant? consonant? !consonant)
initial_consonant_pair <- (&initial consonant consonant !consonant)
initial <- (affricate / sibilant? other? liquid?) !consonant
 
consonant <- (voiced / unvoiced / liquid / m / n) 
affricate <- (t c / t s / d j / d z) 
liquid <- (l / r) 
other <- (p / t / k / f / x / b / d / g / v / m / n !liquid) 
sibilant <- (c / s / j / z) 
coda <- (l / n / r)
voiced <- (b / d / g / j / v / z) 
unvoiced <- (c / f / k / p / s / t / x) 

l <- [lL] !l # <LEAF>
m <- [mM] !m # <LEAF>
n <- [nN] !n # <LEAF>
r <- [rR] !r # <LEAF>
b <- [bB] !b !unvoiced # <LEAF>
d <- [dD] !d !unvoiced # <LEAF>
g <- [gG] !g !unvoiced # <LEAF>
v <- [vV] !v !unvoiced # <LEAF>
j <- [jJ] !j !z !unvoiced # <LEAF>
z <- [zZ] !z !j !unvoiced # <LEAF>
s <- [sS] !s !c !voiced # <LEAF>
c <- [cC] !c !s !x !voiced # <LEAF>
x <- [xX] !x !c !k !voiced # <LEAF>
k <- [kK] !k !x !voiced # <LEAF>
f <- [fF] !f !voiced # <LEAF>
p <- [pP] !p !voiced # <LEAF>
t <- [tT] !t !voiced # <LEAF>

# - Spaces / Pause

post_word <- (pause_char &(vowel_y / coda) / !coda &consonant / spaces)
initial_pause <- (pause_char &vowel_y / !pause_char &consonant)
spaces <- initial_spaces (pause_char &(vowel_y / coda))? / pause_char &(vowel_y / coda) / EOF
initial_spaces <- (hesitation / space_char)+
hesitation <- (space_char+ pause_char? / pause_char) !(y h y) y+ !(pause_char pause_char) (pause_char? &space_char / &(pause_char y) / pause_char / EOF)
space_char <- [\t\n\r?!\u0020]

# - Special characters
pause_char <- ([']) !pause_char
EOF <- !.
digit <- [.0123456789] # <LEAF2>