# eberban PEG grammar - v0.16
# ===========================

# GRAMMAR
# main rule, allow language version/dialect annotation
text <- parser_version? text_1
parser_version <- BU_clause (!parser_version_number borrowing_content (pause_char !pause_char !q)? parser_version_number? / parser_version_number)
parser_version_number <- spaces? TA+

# main text rule
text_1 <- (free_indicator / free_discursive / free_parenthetical)* (paragraph+ / sentence*) spaces? EOF?

# sentences
paragraph <- PU_clause+ sentence*
sentence <- proposition

proposition <- proposition_1 (day proposition_1)*
proposition_1 <- proposition_beday / PE_clause_elidible prenex? BA_clause* predicate_chaining PEY_clause_elidible
proposition_beday <- beday proposition (bi proposition)+ BEY_clause_elidible

prenex <- (PO_clause prenex_term)+ POY_clause
prenex_term <- predicate_term predicate_link*

predicate_chaining <- predicate_filling (predicate_chaining_tag predicate_chaining)? / predicate_unit (predicate_chaining_tag? predicate_chaining)?
predicate_chaining_tag <- VA_clause / predicate_chaining_import
predicate_chaining_import <- BOY_clause predicate_unit

predicate_filling <- predicate_unit predicate_filled_place+
predicate_filled_place <- predicate_place_tag+ predicate_term predicate_link*
predicate_link <- CA_clause predicate_unit+

predicate_place_tag <- FA_clause / predicate_place_import
predicate_place_import <- BO_clause predicate_unit

predicate_term <- predicate_term_day / predicate_term_1
predicate_term_day <- predicate_term_1 (day predicate_term_1)+
predicate_term_1 <- predicate_term_da / predicate_term_2
predicate_term_da <- predicate_term_2 (da predicate_term_2)+
predicate_term_2 <- predicate_term_beday / predicate_unit+
predicate_term_beday <- beday predicate_term (bi predicate_term)+ BEY_clause_elidible

predicate_unit <- (SA_clause / ZA_clause)* predicate_unit_1
predicate_unit_1 <- compound free_post* / borrowing / grammatical_quote / one_word_quote / foreign_quote / abstraction / MA_clause / free_prefix* spaces? (root / string) free_post*

# compound prefixes
compound <- (compound_1 / compound_2 / compound_3 / compound_4  / compound_n) &post_word
compound_1 <- A_clause compound_word
compound_2 <- E_clause compound_word compound_word
compound_3 <- I_clause compound_word compound_word compound_word
compound_4 <- O_clause compound_word compound_word compound_word compound_word
compound_n <- U_clause (!(pause_char? U) compound_word)+ (pause_char? U)
compound_word <- initial_pause native_word

# borrowings
borrowing <- XA_clause borrowing_content (pause_char / space_char / EOF) free_post*
borrowing_content <- (spaces? !sonorant / spaces &sonorant) foreign_word

# quotes
grammatical_quote <- XE_clause text_1 XEY_clause
one_word_quote <- XI_clause spaces? native_word
foreign_quote <- XU_clause (spaces?) foreign_quote_open spaces foreign_quote_content foreign_quote_close free_post*
foreign_quote_content <- (foreign_quote_word spaces)*

# abstractions
abstraction <- PA_clause proposition PAY_clause_elidible

# string (numbers / literals)
string <- (number_string / letter_string) TAY_clause_elidible
number_string <- TA_clause (TA_clause / BQ_clause)*
letter_string <- BQ_clause (TA_clause / BQ_clause)*

# afterthough connectives
day <- BA_clause? DAY_clause BAY_clause? free_post*
da <- DA_clause

# forethough connectives
beday <- BE_clause DAY_clause BAY_clause? free_post*
bi <- BI_clause BAY_clause? free_post*

# free prefix
free_prefix <- JU_clause

# free suffix
free_post <- JUY_clause / free_discursive / free_indicator / free_parenthetical / free_subscript
free_subscript <- JA_clause string
free_discursive <- JE_clause predicate_unit+
free_indicator <- JI_clause
free_parenthetical <- JO_clause text_1 JOY_clause

# PARTICLES CLAUSES
A_clause            <- free_prefix* spaces? A                   # 1-word compound
E_clause            <- free_prefix* spaces? E                   # 2-words compound
I_clause            <- free_prefix* spaces? I                   # 3-words compound
O_clause            <- free_prefix* spaces? O                   # 4-words compound
U_clause            <- free_prefix* spaces? U                   # n-words compound starter and terminator

BA_clause           <- free_prefix* spaces? BA free_post*       # pre negation
BAY_clause          <- free_prefix* spaces? BAY                 # post negation
BE_clause           <- free_prefix* spaces? BE                  # forethought connective starter
BEY_clause          <- free_prefix* spaces? BEY free_post*      # forethought connective terminator
BEY_clause_elidible <- BEY_clause?
BI_clause           <- free_prefix* spaces? BI                  # forethought connective separator
BO_clause           <- free_prefix* spaces? BO                  # filling place import
BOY_clause          <- free_prefix* spaces? BOY                 # chaining place import
BQ_clause           <- free_prefix* spaces? BQ                  # letters
BU_clause           <- free_prefix* spaces? BU                  # parser version/dialect
CA_clause           <- free_prefix* spaces? CA                  # predicate link
DA_clause           <- free_prefix* spaces? DA free_post*       # set creator
DAY_clause          <- free_prefix* spaces? DAY free_post*      # logical connectives
FA_clause           <- free_prefix* spaces? FA free_post*       # filling place tag
JA_clause           <- free_prefix* spaces? JA                  # free subscript
JE_clause           <- free_prefix* spaces? JE                  # free discursive (predicate)
JI_clause           <- free_prefix* spaces? JI                  # free suffix (indicator / marker)
JO_clause           <- free_prefix* spaces? JO                  # free parenthetical started (text)
JOY_clause          <- free_prefix* spaces? JOY                 # free parenthetical terminator
JU_clause           <- spaces? JU                               # free prefix / scope starter
JUY_clause          <- spaces? JUY                              # free scope terminator
MA_clause           <- free_prefix* spaces? MA free_post*       # surrogate predicates (pronouns, ...)
PA_clause           <- free_prefix* spaces? PA                  # abstractors starter
PAY_clause          <- free_prefix* spaces? PAY free_post*      # abstractors terminator
PAY_clause_elidible <- PAY_clause?
PE_clause           <- free_prefix* spaces? PE free_post*       # proposition starter
PE_clause_elidible  <- PE_clause?
PEY_clause          <- free_prefix* spaces? PEY free_post*      # proposition terminator
PEY_clause_elidible <- PEY_clause?
PO_clause           <- free_prefix* spaces? PO free_post*       # prenex starter/separator
POY_clause          <- free_prefix* spaces? POY free_post*      # prenex terminator
PU_clause           <- free_prefix* spaces? PU free_post*       # paragraph marker
SA_clause           <- free_prefix* spaces? SA                  # place binding tag
TA_clause           <- free_prefix* spaces? TA                  # numbers/digits
TAY_clause          <- free_prefix* spaces? TAY                 # number / string terminator
TAY_clause_elidible <- TAY_clause?
VA_clause           <- free_prefix* spaces? VA free_post*       # chaining tags
XA_clause           <- free_prefix* spaces? XA                  # borrowing
XE_clause           <- free_prefix* spaces? XE                  # grammatical quote starter
XEY_clause          <- free_prefix* spaces? XEY free_post*      # grammatical quote terminator
XI_clause           <- free_prefix* spaces? XI                  # one word quote
XU_clause           <- free_prefix* spaces? XU                  # foreign quote
ZA_clause           <- free_prefix* spaces? ZA                  # predicate unit transformation

# PARTICLE FAMILIES
A     <- &particle (a)
E     <- &particle (e)
I     <- &particle (i)
O     <- &particle (o)
U     <- &particle (u)

BA    <- &particle (b a)
BAY   <- &particle (b a y)
BE    <- &particle (b e)
BEY   <- &particle (b e y)
BI    <- &particle (b i)
BO    <- &particle (b o)
BOY   <- &particle (b o y)
BQ    <- &particle (consonant q / yw q / aeiouq h q / q h a / q h e)
BU    <- &particle (b u)
CA    <- &particle (c vtail)
DA    <- &particle (d aeiou)
DAY   <- &particle (d aeiou y)
FA    <- &particle (f vtail)
JA    <- &particle (j a)
JE    <- &particle (j &e vtail)
JI    <- &particle (j &(i / y) vtail)
JO    <- &particle (j o)
JOY   <- &particle (j o y)
JU    <- &particle !(JUY &post_word) (j &(u / w) vtail)
JUY   <- &particle (j u y)
MA    <- &particle (m vtail)
PA    <- &particle !(PAY &post_word) (p &a vtail)
PAY   <- &particle (p a y)
PE    <- &particle (p e)
PEY   <- &particle (p e y)
PO    <- &particle (p o)
POY   <- &particle (p o y)
PU    <- &particle (p u)
SA    <- &particle (s vtail)
TA    <- &particle !(TAY &post_word) (t vtail) / digit
TAY   <- &particle (t a y)
VA    <- &particle (v vtail)
XA    <- &particle (x &a vtail)
XE    <- &particle (x e)
XEY   <- &particle (x e y)
XI    <- &particle (x &(i / y) vtail)
XU    <- &particle (x &(u / w) vtail)
ZA    <- &particle (z vtail)

# MORPHOLOGY
# - Forein text quoting
foreign_quote_open <- native_word
foreign_quote_word <- (!spaces .)+ 
foreign_quote_close <- native_word

# - Legal words
foreign_word <- (initial_consonant_pair / consonant)? vtail_q (consonant_cluster vtail_q)* consonant? consonant?
native_word <-  root / particle
particle <- consonant? vtail_q &post_word
root <- ((initial_consonant_pair vtail_q sonorant?) / ((initial_consonant_pair / consonant)? vtail_q sonorant)) &post_word

# - Vowel tails
vtail_q <- vtail_q_unit vtail_q_1*
vtail_q_1 <- separator vtail_q_unit
vtail_q_unit <- yw? aeiouq (yw aeiouq)* y?

vtail <- vtail_unit vtail_1*
vtail_1 <- separator vtail_unit
vtail_unit <- yw? aeiou (yw aeiou)* y?

separator <- h / sonorant
aeiouq <- a / e / i / o / u / q
aeiou <- a / e / i / o / u
yw <- y / w

h <- [hH] # <LEAF>
y <- [yY] # <LEAF>
w <- [wW] # <LEAF>
a <- [aA] # <LEAF>
e <- [eE] # <LEAF>
i <- [iI] # <LEAF>
o <- [oO] # <LEAF>
u <- [uU] # <LEAF>
q <- [qQ] # <LEAF>

# - Legal consonant and consonant pairs
consonant_cluster <- (!(sonorant sonorant sonorant) consonant consonant? consonant? !consonant)
initial_consonant_pair <- !(!affricate yw) (&initial consonant consonant !consonant)
initial <- (affricate / sibilant? other? liquid?) !consonant
 
consonant <- (voiced / unvoiced / liquid / m / n) 
affricate <- (t c / t s / d j / d z) 
liquid <- (l / r) 
other <- (p / t / k / f / x / b / d / g / v / m / n !liquid) 
sibilant <- (c / s / j / z) 
sonorant <- (l / n / r) # technically "alveolar sonorant" as "m" is not included
voiced <- (b / d / g / j / v / z) 
unvoiced <- (c / f / k / p / s / t / x) 

l <- [lL] !l # <LEAF>
m <- [mM] !m # <LEAF>
n <- [nN] !n # <LEAF>
r <- [rR] !r # <LEAF>
b <- [bB] !b !unvoiced # <LEAF>
d <- [dD] !d !unvoiced # <LEAF>
g <- [gG] !g !unvoiced # <LEAF>
v <- [vV] !v !unvoiced # <LEAF>
j <- [jJ] !j !z !unvoiced # <LEAF>
z <- [zZ] !z !j !unvoiced # <LEAF>
s <- [sS] !s !c !voiced # <LEAF>
c <- [cC] !c !s !x !voiced # <LEAF>
x <- [xX] !x !c !k !voiced # <LEAF>
k <- [kK] !k !x !voiced # <LEAF>
f <- [fF] !f !voiced # <LEAF>
p <- [pP] !p !voiced # <LEAF>
t <- [tT] !t !voiced # <LEAF>

# - Spaces / Pause
post_word <- (pause_char &(aeiouq / sonorant) / !sonorant &consonant / spaces)
initial_pause <- (pause_char &aeiouq / !pause_char &consonant)
spaces <- initial_spaces (pause_char &(aeiouq / sonorant))? / pause_char &(aeiouq / sonorant) / EOF
initial_spaces <- (hesitation / space_char)+
hesitation <- (space_char+ pause_char? / pause_char) !(q h q) q+ !(pause_char pause_char) (pause_char? &space_char / &(pause_char q) / pause_char / EOF)
space_char <- [\t\n\r?!\u0020]

# - Special characters
pause_char <- ([']) !pause_char
EOF <- !.
digit <- [.0123456789] # <LEAF2>