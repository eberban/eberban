# eberban PEG grammar - v0.15
# ===========================

# GRAMMAR
# main rule, allow language version/dialect annotation
text <- parser_version? text_1
parser_version <- KU_clause (!parser_version_number borrowing_content (pause_char !pause_char !q)? parser_version_number? / parser_version_number)
parser_version_number <- spaces? TA+

# main text rule
text_1 <- (free_indicator / free_discursive / free_parenthetical)* (paragraph+ / sentence*) spaces? EOF?

# sentences
paragraph <- DA_clause+ sentence*
sentence <- proposition

proposition <- proposition_1 (ja proposition_1)*
proposition_1 <- proposition_keja / DE_clause_elidible prenex? KA_clause* predicate_chaining DEI_clause_elidible
proposition_keja <- keja proposition (ki proposition)+ KEI_clause_elidible

prenex <- (DO_clause prenex_term)+ DOI_clause
prenex_term <- predicate_term predicate_link*

predicate_chaining <- predicate_filling (predicate_chaining_tag predicate_chaining)? / predicate_unit (predicate_chaining_tag? predicate_chaining)?
predicate_chaining_tag <- CA_clause / predicate_chaining_import
predicate_chaining_import <- KOI_clause predicate_unit

predicate_filling <- predicate_unit predicate_filled_place+
predicate_filled_place <- predicate_place_tag+ predicate_term predicate_link*
predicate_link <- VA_clause predicate_unit+

predicate_place_tag <- FA_clause / predicate_place_import
predicate_place_import <- KO_clause predicate_unit

predicate_term <- predicate_term_ja / predicate_term_1
predicate_term_ja <- predicate_term_1 (ja predicate_term_1)+
predicate_term_1 <- predicate_term_jai / predicate_term_2
predicate_term_jai <- predicate_term_2 (jai predicate_term_2)+
predicate_term_2 <- predicate_term_keja / predicate_unit
predicate_term_keja <- keja predicate_term (ki predicate_term)+ KEI_clause_elidible

predicate_unit <- SA_clause* predicate_unit_1
predicate_unit_1 <- compound free_post* / borrowing / grammatical_quote / one_word_quote / foreign_quote / abstraction / MA_clause / free_prefix* spaces? (root / string) free_post*

# compound prefixes
compound <- (compound_1 / compound_2 / compound_3 / compound_4  / compound_n) &post_word
compound_1 <- A_clause compound_word
compound_2 <- E_clause compound_word compound_word
compound_3 <- I_clause compound_word compound_word compound_word
compound_4 <- O_clause compound_word compound_word compound_word compound_word
compound_n <- U_clause (!(pause_char? U) compound_word)+ (pause_char? U)
compound_word <- initial_pause native_word

# borrowings
borrowing <- ZA_clause borrowing_content (pause_char / space_char / EOF) free_post*
borrowing_content <- (spaces? !sonorant / spaces &sonorant) foreign_word

# quotes
grammatical_quote <- ZE_clause text_1 ZEI_clause
one_word_quote <- ZI_clause spaces? native_word
foreign_quote <- ZU_clause (spaces?) foreign_quote_open spaces foreign_quote_content foreign_quote_close free_post*
foreign_quote_content <- (foreign_quote_word spaces)*

# abstractions
abstraction <- BA_clause proposition BAY_clause_elidible

# string (numbers / literals)
string <- (number_string / letter_string) TAY_clause_elidible
number_string <- TA_clause (TA_clause / BQ_clause)*
letter_string <- BQ_clause (TA_clause / BQ_clause)*

# afterthough connectives
ja <- KA_clause? SA_clause? JA_clause KAY_clause? free_post*
jai <- JAY_clause

# forethough connectives
keja <- KE_clause SA_clause? JA_clause KAY_clause? free_post*
ki <- KI_clause KAY_clause? free_post*

# free prefix
free_prefix <- PA_clause

# free suffix
free_post <- PAY_clause / free_discursive / free_indicator / free_parenthetical / free_subscript
free_discursive <- PE_clause predicate_unit+
free_indicator <- PI_clause
free_parenthetical <- PO_clause text_1 POI_clause
free_subscript <- PU_clause string

# PARTICLES CLAUSES
A_clause            <- free_prefix* spaces? A                   # 1-word compound
E_clause            <- free_prefix* spaces? E                   # 2-words compound
I_clause            <- free_prefix* spaces? I                   # 3-words compound
O_clause            <- free_prefix* spaces? O                   # 4-words compound
U_clause            <- free_prefix* spaces? U                   # n-words compound starter and terminator

BA_clause           <- free_prefix* spaces? BA                  # abstractors starter
BAY_clause          <- free_prefix* spaces? BAY free_post*      # abstractors terminator
BAY_clause_elidible <- BAY_clause?
BQ_clause           <- free_prefix* spaces? BQ                  # letters
CA_clause           <- free_prefix* spaces? CA free_post*       # chaining tags
DA_clause           <- free_prefix* spaces? DA free_post*       # paragraph marker
DE_clause           <- free_prefix* spaces? DE free_post*       # proposition starter
DE_clause_elidible  <- DE_clause?
DEI_clause          <- free_prefix* spaces? DEI free_post*      # proposition terminator
DEI_clause_elidible <- DEI_clause?
DO_clause           <- free_prefix* spaces? DO free_post*       # prenex starter/separator
DOI_clause          <- free_prefix* spaces? DOI free_post*      # prenex terminator
FA_clause           <- free_prefix* spaces? FA free_post*       # filling place tag
JA_clause           <- free_prefix* spaces? JA free_post*       # logical connectives
JAY_clause          <- free_prefix* spaces? JAY free_post*      # set creator
KA_clause           <- free_prefix* spaces? KA free_post*       # pre negation
KAY_clause          <- free_prefix* spaces? KAY                 # post negation
KE_clause           <- free_prefix* spaces? KE                  # forethought connective starter
KEI_clause          <- free_prefix* spaces? KEI free_post*      # forethought connective terminator
KEI_clause_elidible <- KEI_clause?
KI_clause           <- free_prefix* spaces? KI                  # forethought connective separator
KO_clause           <- free_prefix* spaces? KO                  # filling place import
KOI_clause          <- free_prefix* spaces? KOI                 # chaining place import
KU_clause           <- free_prefix* spaces? KU                  # parser version/dialect
MA_clause           <- free_prefix* spaces? MA free_post*       # surrogate predicates (pronouns, ...)
PA_clause           <- spaces? PA                               # free scope started
PAY_clause          <- spaces? PAY                              # free scope terminator
PE_clause           <- free_prefix* spaces? PE                  # free discursive (predicate)
PI_clause           <- free_prefix* spaces? PI                  # free indicator (marker)
PO_clause           <- free_prefix* spaces? PO                  # free parenthetical started (text)
POI_clause          <- free_prefix* spaces? POI                 # free parenthetical terminator
PU_clause           <- free_prefix* spaces? PU                  # free subscript
SA_clause           <- free_prefix* spaces? SA                  # predicate unit transformation
TA_clause           <- free_prefix* spaces? TA                  # numbers/digits
TAY_clause          <- free_prefix* spaces? TAY                 # number / string terminator
TAY_clause_elidible <- TAY_clause?
VA_clause           <- free_prefix* spaces? VA                  # predicate link
ZA_clause           <- free_prefix* spaces? ZA                  # borrowing
ZE_clause           <- free_prefix* spaces? ZE                  # grammatical quote starter
ZEI_clause          <- free_prefix* spaces? ZEI free_post*      # grammatical quote terminator
ZI_clause           <- free_prefix* spaces? ZI                  # one word quote
ZU_clause           <- free_prefix* spaces? ZU                  # foreign quote

# PARTICLE FAMILIES
A     <- &particle (a)
E     <- &particle (e)
I     <- &particle (i)
O     <- &particle (o)
U     <- &particle (u)

BA    <- &particle !(BAY &post_word) (b vtail)
BAY   <- &particle (b a i)
BQ    <- &particle (consonant q / yw q / aeiouq h q / q h a / q h e)
CA    <- &particle (c vtail)
DA    <- &particle (d a)
DE    <- &particle (d e)
DEI   <- &particle (d e i)
DO    <- &particle (d o)
DOI   <- &particle (d o i)
FA    <- &particle (f vtail)
JA    <- &particle (j aeiou)
JAY   <- &particle !(JA &post_word) (j vtail)
KA    <- &particle (k a)
KAY   <- &particle (k a i)
KE    <- &particle (k e)
KEI   <- &particle (k e i)
KI    <- &particle (k i)
KO    <- &particle (k o)
KOI   <- &particle (k o i)
KU    <- &particle (k u)
MA    <- &particle (m vtail)
PA    <- &particle (p a vtail_1?)
PAY   <- &particle (p a i)
PE    <- &particle (p &e vtail)
PI    <- &particle (p &i vtail)
PO    <- &particle (p o)
POI   <- &particle (p o i)
PU    <- &particle (p u)
SA    <- &particle (s vtail)
TA    <- &particle !(TAY &post_word) (t vtail) / digit
TAY   <- &particle (t a i)
VA    <- &particle (v vtail)
ZA    <- &particle (z &a vtail)
ZE    <- &particle (z e)
ZEI   <- &particle (z e i)
ZI    <- &particle (z &i vtail)
ZU    <- &particle (z &u vtail)

# MORPHOLOGY
# - Forein text quoting
foreign_quote_open <- native_word
foreign_quote_word <- (!spaces .)+ 
foreign_quote_close <- native_word

# - Legal words
foreign_word <- (initial_consonant_pair / consonant)? vtail_q (consonant_cluster vtail_q)* consonant? consonant?
native_word <-  root / particle
particle <- consonant? vtail_q &post_word
root <- ((initial_consonant_pair vtail_q sonorant?) / ((initial_consonant_pair / consonant)? vtail_q sonorant)) &post_word

# - Vowel tails
vtail_q <- vtail_q_unit vtail_q_1*
vtail_q_1 <- separator vtail_q_unit
vtail_q_unit <- yw? aeiouq (yw aeiouq)* y?

vtail <- vtail_unit vtail_1*
vtail_1 <- separator vtail_unit
vtail_unit <- yw? aeiou (yw aeiou)* y?

separator <- h / sonorant
aeiouq <- a / e / i / o / u / q
aeiou <- a / e / i / o / u
yw <- y / w

h <- [hH] # <LEAF>
y <- [yY] # <LEAF>
w <- [wW] # <LEAF>
a <- [aA] # <LEAF>
e <- [eE] # <LEAF>
i <- [iI] # <LEAF>
o <- [oO] # <LEAF>
u <- [uU] # <LEAF>
q <- [qQ] # <LEAF>

# - Legal consonant and consonant pairs
consonant_cluster <- (!(sonorant sonorant sonorant) consonant consonant? consonant? !consonant)
initial_consonant_pair <- (&initial consonant consonant !consonant)
initial <- (affricate / sibilant? other? liquid?) !consonant
 
consonant <- (voiced / unvoiced / liquid / m / n) 
affricate <- (t c / t s / d j / d z) 
liquid <- (l / r) 
other <- (p / t / k / f / x / b / d / g / v / m / n !liquid) 
sibilant <- (c / s / j / z) 
sonorant <- (l / n / r) # technically "alveolar sonorant" as "m" is not included
voiced <- (b / d / g / j / v / z) 
unvoiced <- (c / f / k / p / s / t / x) 

l <- [lL] !l # <LEAF>
m <- [mM] !m # <LEAF>
n <- [nN] !n # <LEAF>
r <- [rR] !r # <LEAF>
b <- [bB] !b !unvoiced # <LEAF>
d <- [dD] !d !unvoiced # <LEAF>
g <- [gG] !g !unvoiced # <LEAF>
v <- [vV] !v !unvoiced # <LEAF>
j <- [jJ] !j !z !unvoiced # <LEAF>
z <- [zZ] !z !j !unvoiced # <LEAF>
s <- [sS] !s !c !voiced # <LEAF>
c <- [cC] !c !s !x !voiced # <LEAF>
x <- [xX] !x !c !k !voiced # <LEAF>
k <- [kK] !k !x !voiced # <LEAF>
f <- [fF] !f !voiced # <LEAF>
p <- [pP] !p !voiced # <LEAF>
t <- [tT] !t !voiced # <LEAF>

# - Spaces / Pause
post_word <- (pause_char &(aeiouq / sonorant) / !sonorant &consonant / spaces)
initial_pause <- (pause_char &aeiouq / !pause_char &consonant)
spaces <- initial_spaces (pause_char &(aeiouq / sonorant))? / pause_char &(aeiouq / sonorant) / EOF
initial_spaces <- (hesitation / space_char)+
hesitation <- (space_char+ pause_char? / pause_char) !(q h q) q+ !(pause_char pause_char) (pause_char? &space_char / &(pause_char q) / pause_char / EOF)
space_char <- [\t\n\r?!\u0020]

# - Special characters
pause_char <- ([']) !pause_char
EOF <- !.
digit <- [.0123456789] # <LEAF2>