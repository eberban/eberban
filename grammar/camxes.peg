# eberban PEG grammar - v0.18
# ===========================

# GRAMMAR
# main rule, allow language version/dialect annotation
text <- parser_version? text_1
parser_version <- BU_clause (parser_version_short / parser_version_long)
parser_version_long <- borrowing_part parser_version_number?
parser_version_short <- parser_version_number
parser_version_number <- spaces? TA+

# main text rule
text_1 <- (free_indicator / free_discursive / free_parenthetical)* paragraphs? spaces? EOF?

# text structure
paragraphs <- paragraph (&PU_clause paragraph)*
paragraph <- PU_clause? sentence (&PA_clause sentence)*
sentence <- scope / fragments_sentence
fragments_sentence <- PA_clause_elidible fragment+ PAY_clause_elidible
fragment <- DAY_clause / FA_clause / VA_clause / SA_clause / ZA_clause / sequential_import / parallel_import

# pred scopes
scope <- scope_arguments? scope_1 (connective scope_1)*
scope_1 <- PA_clause_elidible BA_clause* scope_2 PAY_clause_elidible
scope_2 <- sequential (DAY_clause sequential)*
scope_arguments <- (KAY_clause / GAY_clause)+ PI_clause

# sequential chaining
sequential <- unit parallel (sequential_tag sequential)? / unit (sequential_tag? sequential)?
sequential_tag <- VA_clause / sequential_import
sequential_import <- BOY_clause unit

# parallel chaining
parallel <- parallel_item+
parallel_item <- parallel_tag+ parallel_term
parallel_tag <- FA_clause / parallel_import
parallel_import <- BO_clause unit

parallel_term <- parallel_term_connective / parallel_term_1
parallel_term_connective <- parallel_term_1 (connective parallel_term_1)+
parallel_term_1 <- parallel_term_set / parallel_term_2
parallel_term_set <- parallel_term_2 (DAY_clause parallel_term_2)+ BE_clause_elidible
parallel_term_2 <- unit+

# predicate unit
unit <- unit_po / unit_1
unit_po <- GAY_clause PO_clause unit_1 / unit_1 PO_clause GAY_clause
unit_1 <- (SA_clause / ZA_clause)* unit_2
unit_2 <- compound / borrowing / quote / subscope / variable / free_prefix* spaces? (root / string) free_post*

# compounds
compound <- free_prefix* spaces? (compound_1 / compound_2 / compound_3 / compound_n) &post_word free_post*
compound_1 <- a compound_word
compound_2 <- e compound_word compound_word
compound_3 <- i compound_word compound_word compound_word
compound_n <- o (!compound_n_end compound_word)+ compound_n_end
compound_n_end <- pause_char? o &post_word
compound_word <- initial_pause native_word

# borrowings
borrowing <- free_prefix* borrowing_part+ BE_clause_elidible free_post*
borrowing_part <- spaces? borrowing_prefix borrowing_content borrowing_end
borrowing_prefix <- (w &aeiouq / u)
borrowing_content <- foreign_word
borrowing_end <- (pause_char / space_char / EOF)

# quotes
quote <- grammatical_quote / one_word_quote / foreign_quote
grammatical_quote <- XA_clause text_1 XAY_clause
one_word_quote <- XE_clause spaces? native_word
foreign_quote <- XO_clause spaces? foreign_quote_open spaces foreign_quote_content foreign_quote_close free_post*
foreign_quote_content <- (foreign_quote_word spaces)*

# sub-scopes
subscope <- PE_clause scope PEY_clause_elidible

# string (numbers / literals)
string <- (number_string / letter_string) BE_clause_elidible
number_string <- TA_clause (TA_clause / BQ_clause)*
letter_string <- BQ_clause (TA_clause / BQ_clause)*

# variables
variable <- variable_intrinsic / variable_individual / variable_pred
variable_intrinsic <- MA_clause
variable_individual <- KAY_clause / KA_clause
variable_pred <- GAY_clause / GA_clause

# connectives
connective <- BA_clause? DA_clause BAY_clause? free_post*

# free prefix
free_prefix <- JU_clause

# free suffix
free_post <- JUY_clause / free_discursive / free_indicator / free_parenthetical / free_subscript
free_subscript <- JA_clause string
free_discursive <- JE_clause unit+
free_indicator <- CA_clause
free_parenthetical <- JO_clause text_1 JOY_clause

# PARTICLES CLAUSES
BA_clause           <- free_prefix* spaces? BA free_post*       # pre negation
BAY_clause          <- free_prefix* spaces? BAY                 # post negation
BE_clause           <- spaces? BE                               # miscellaneous terminator
BE_clause_elidible  <- BE_clause?
BO_clause           <- free_prefix* spaces? BO                  # filling place import
BOY_clause          <- free_prefix* spaces? BOY                 # chaining place import
BQ_clause           <- free_prefix* spaces? BQ                  # letters
BU_clause           <- spaces? BU                               # parser version/dialect
CA_clause           <- free_prefix* spaces? CA                  # free suffix (indicator / marker)
DA_clause           <- free_prefix* spaces? DA free_post*       # logical connectives
DAY_clause          <- free_prefix* spaces? DAY free_post*      # set creator
FA_clause           <- free_prefix* spaces? FA free_post*       # filling place tag
GA_clause           <- free_prefix* spaces? GA free_post*       # use pred variables
GAY_clause          <- free_prefix* spaces? GAY free_post*      # new pred variables
JA_clause           <- free_prefix* spaces? JA                  # free subscript
JE_clause           <- free_prefix* spaces? JE                  # free discursive (pred)
JO_clause           <- free_prefix* spaces? JO                  # free parenthetical started (text)
JOY_clause          <- free_prefix* spaces? JOY                 # free parenthetical terminator
JU_clause           <- spaces? JU                               # free prefix / scope starter
JUY_clause          <- spaces? JUY                              # free scope terminator
KA_clause           <- free_prefix* spaces? KA free_post*       # use individual variables
KAY_clause          <- free_prefix* spaces? KAY free_post*      # new individual variables
MA_clause           <- free_prefix* spaces? MA free_post*       # intrinsic variables (pronouns, ...)
PA_clause           <- free_prefix* spaces? PA free_post*       # pred scope starter
PA_clause_elidible  <- PA_clause?
PAY_clause          <- free_prefix* spaces? PAY free_post*      # pred scope terminator
PAY_clause_elidible <- PAY_clause?
PE_clause           <- free_prefix* spaces? PE free_post*       # pred subscope starter
PEY_clause          <- free_prefix* spaces? PEY free_post*      # pred subscope terminator
PEY_clause_elidible <- PEY_clause?
PI_clause           <- free_prefix* spaces? PI free_post*       # pred scope arguments terminator
PO_clause           <- spaces? PO                               # pred variable affectation
PU_clause           <- free_prefix* spaces? PU free_post*       # paragraph marker
SA_clause           <- free_prefix* spaces? SA free_post*       # place binding tag
TA_clause           <- free_prefix* spaces? TA                  # numbers/digits
VA_clause           <- free_prefix* spaces? VA free_post*       # chaining tags
XA_clause           <- free_prefix* spaces? XA                  # grammatical quote starter
XAY_clause          <- free_prefix* spaces? XAY free_post*      # grammatical quote terminator
XE_clause           <- free_prefix* spaces? XE                  # one word quote
XO_clause           <- free_prefix* spaces? XO                  # foreign quote
ZA_clause           <- free_prefix* spaces? ZA                  # pred unit transformation

# PARTICLE FAMILIES
BA    <- &particle (b a)
BAY   <- &particle (b a y)
BE    <- &particle (b &e vtail)
BO    <- &particle (b o)
BOY   <- &particle (b o y)
BQ    <- &particle (consonant q / yw q / aeiouq h q / q h a / q h e)
BU    <- &particle (b u)
CA    <- &particle (c vtail)
DA    <- &particle !(DAY &post_word) (d vtail)
DAY   <- &particle (d aeiou y)
FA    <- &particle (f vtail)
GA    <- &particle (g !y_terminated vtail)
GAY   <- &particle (g &y_terminated vtail)
JA    <- &particle (j a)
JE    <- &particle (j &e vtail)
JO    <- &particle (j o)
JOY   <- &particle (j o y)
JU    <- &particle !(JUY &post_word) (j &(u / w) vtail)
JUY   <- &particle (j u y)
KA    <- &particle (k !y_terminated vtail)
KAY   <- &particle (k &y_terminated vtail)
MA    <- &particle (m vtail)
PA    <- &particle (p a)
PAY   <- &particle (p a y)
PE    <- &particle (p e)
PEY   <- &particle (p e y)
PI    <- &particle (p i)
PO    <- &particle (p o)
PU    <- &particle (p &(u / w) vtail)
SA    <- &particle (s vtail)
TA    <- &particle (t vtail) / digit
VA    <- &particle (v vtail)
XA    <- &particle !(XAY &post_word) (x &a vtail)
XAY   <- &particle (x a y)
XE    <- &particle (x &e vtail)
XO    <- &particle (x &o vtail)
ZA    <- &particle (z vtail)

# MORPHOLOGY
# - Forein text quoting
foreign_quote_open <- native_word
foreign_quote_word <- (!spaces .)+ 
foreign_quote_close <- native_word

# - Legal words
foreign_word <- (initial_consonant_pair / consonant)? vtail_q (consonant_cluster vtail_q)* consonant? consonant?
native_word <-  root / particle
particle <- consonant? vtail_q &post_word
root <- ((initial_consonant_pair vtail_q sonorant?) / ((initial_consonant_pair / consonant)? vtail_q sonorant)) &post_word

# - Vowel tails
vtail_q <- vtail_q_unit vtail_q_1*
vtail_q_1 <- separator vtail_q_unit
vtail_q_unit <- yw? aeiouq (yw aeiouq)* y?

vtail <- vtail_unit vtail_1*
vtail_1 <- separator vtail_unit
vtail_unit <- yw? aeiou (yw aeiou)* y?
y_terminated <- (aeiou / w / separator / y !post_word)+ y

separator <- h / sonorant
aeiouq <- a / e / i / o / u / q
aeiou <- a / e / i / o / u
yw <- y / w

h <- [hH] # <LEAF>
y <- [yY] # <LEAF>
w <- [wW] # <LEAF>
a <- [aA] # <LEAF>
e <- [eE] # <LEAF>
i <- [iI] # <LEAF>
o <- [oO] # <LEAF>
u <- [uU] # <LEAF>
q <- [qQ] # <LEAF>

# - Legal consonant and consonant pairs
consonant_cluster <- (!(sonorant sonorant sonorant) consonant consonant? consonant? !consonant)
initial_consonant_pair <- !(!affricate yw) (&initial consonant consonant !consonant)
initial <- (affricate / sibilant? other? liquid?) !consonant
 
consonant <- (voiced / unvoiced / liquid / m / n) 
affricate <- (t c / t s / d j / d z) 
liquid <- (l / r) 
other <- (p / t / k / f / x / b / d / g / v / m / n !liquid) 
sibilant <- (c / s / j / z) 
sonorant <- (l / n / r) # technically "alveolar sonorant" as "m" is not included
voiced <- (b / d / g / j / v / z) 
unvoiced <- (c / f / k / p / s / t / x) 

l <- [lL] !l # <LEAF>
m <- [mM] !m # <LEAF>
n <- [nN] !n # <LEAF>
r <- [rR] !r # <LEAF>
b <- [bB] !b !unvoiced # <LEAF>
d <- [dD] !d !unvoiced # <LEAF>
g <- [gG] !g !unvoiced # <LEAF>
v <- [vV] !v !unvoiced # <LEAF>
j <- [jJ] !j !z !unvoiced # <LEAF>
z <- [zZ] !z !j !unvoiced # <LEAF>
s <- [sS] !s !c !voiced # <LEAF>
c <- [cC] !c !s !x !voiced # <LEAF>
x <- [xX] !x !c !k !voiced !liquid # <LEAF>
k <- [kK] !k !x !voiced # <LEAF>
f <- [fF] !f !voiced # <LEAF>
p <- [pP] !p !voiced # <LEAF>
t <- [tT] !t !voiced # <LEAF>

# - Spaces / Pause
post_word <- (pause_char &(aeiouq / sonorant) / !sonorant &consonant / spaces)
initial_pause <- (pause_char &aeiouq / !pause_char &consonant)
spaces <- initial_spaces (pause_char &(aeiouq / sonorant))? / pause_char &(aeiouq / sonorant) / EOF
initial_spaces <- (hesitation / space_char)+
hesitation <- (space_char+ pause_char? / pause_char) !(q h q) q+ !(pause_char pause_char) (pause_char? &space_char / &(pause_char q) / pause_char / EOF)
space_char <- [\t\n\r?!\u0020]

# - Special characters
pause_char <- ([']) !pause_char
EOF <- !.
digit <- [.0123456789] # <LEAF2>